// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PontoSavi.Infra.Data.Context;

#nullable disable

namespace PontoSavi.src.PontoSavi.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240626234711_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CNPJ = "00000000000000",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 157, DateTimeKind.Local).AddTicks(1889),
                            Name = "Ponto Savi",
                            TradeName = "Ponto Savi",
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 157, DateTimeKind.Local).AddTicks(1901)
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.CompanyWorkShift", b =>
                {
                    b.Property<int>("WorkShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("WorkShiftId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkShiftId", "TenantId")
                        .IsUnique();

                    b.ToTable("CompanyWorkShifts");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("Date", "TenantId")
                        .IsUnique();

                    b.ToTable("DaysOff");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckInDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckInStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CheckOutAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckOutDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CheckOutStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("TenantId");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f7f54241-ceb7-4447-a82a-919bd79ad27c",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(423),
                            Name = "Desenvolvedor",
                            NormalizedName = "DESENVOLVEDOR",
                            TenantId = 1,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(433)
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "b4739453-b334-43b5-ab84-32d38b5ef729",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(441),
                            Name = "CEO",
                            NormalizedName = "CEO",
                            TenantId = 1,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(442)
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "0ac2e163-a52f-467d-8bc7-6cb38a3ae43b",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(447),
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR",
                            TenantId = 1,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(447)
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "f0a9c551-e052-4250-8f99-2a66db1b274c",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(452),
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR",
                            TenantId = 1,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(453)
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "563e651f-5a63-4af5-a1f0-eb598178133e",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(466),
                            Name = "Colaborador",
                            NormalizedName = "COLABORADOR",
                            TenantId = 1,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 487, DateTimeKind.Local).AddTicks(467)
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3282124a-d4e1-4d11-8921-71e210ff9f2f",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 241, DateTimeKind.Local).AddTicks(6238),
                            Email = "dev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Developer",
                            NormalizedEmail = "DEV@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAIAAYagAAAAEJp7jwqZs+FcK7ICPK+c4/CaCsaLub+CCnv2jaODzKFE4wOdOAEdba/NYFdG98D5Pg==",
                            PhoneNumber = "(55) 85 9 9999-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4b3bf2f-0ab2-47d9-9eca-6dab94c9e338",
                            TenantId = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 241, DateTimeKind.Local).AddTicks(6250),
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13a4d7be-9756-4226-8cee-1a35813c722e",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 322, DateTimeKind.Local).AddTicks(5857),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Administrator",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKuNRSgGfu0lNdxPn5tSaAjP7a7DOCTNgKF60VqIK8DBvMK+FUqDp/SaDiMWPXKSZQ==",
                            PhoneNumber = "(55) 85 9 9999-9998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc4beede-36a5-4d8b-a402-9e01680012a6",
                            TenantId = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 322, DateTimeKind.Local).AddTicks(5868),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c99b9da2-b8c7-4ce4-8a83-a9659bca23b7",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 402, DateTimeKind.Local).AddTicks(6001),
                            Email = "super@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Supervisor",
                            NormalizedEmail = "SUPER@GMAIL.COM",
                            NormalizedUserName = "SUPER",
                            PasswordHash = "AQAAAAIAAYagAAAAENIo2H2QfbaI0bABDCUmg4WbwxAwdYLIGINfTcHHUpT1cCzWaijDBO7GRK/Hic4yVw==",
                            PhoneNumber = "(55) 85 9 9999-9997",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36b24f13-6909-48cd-a6bd-86ed0904b519",
                            TenantId = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 402, DateTimeKind.Local).AddTicks(6015),
                            UserName = "super"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddfafaae-f59f-422e-9ac8-6c922a4df7e5",
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 486, DateTimeKind.Local).AddTicks(56),
                            Email = "base@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Base",
                            NormalizedEmail = "BASE@GMAIL.COM",
                            NormalizedUserName = "BASE",
                            PasswordHash = "AQAAAAIAAYagAAAAEOxWFPcM92IUDHtS/XI/KjMhwiPCz899+tJZU8guodnFb1WsF+qZtCv74jrQ8A67Fw==",
                            PhoneNumber = "(55) 85 9 9999-9997",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43646f1e-7e45-4596-93e9-f6e2e38a9ffa",
                            TenantId = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 486, DateTimeKind.Local).AddTicks(70),
                            UserName = "base"
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId", "TenantId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9035),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9048)
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9052),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9053)
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9054),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9055)
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9056),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9057)
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 5,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9058),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9059)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9060),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9061)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 5,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9062),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9071)
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 4,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9081),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9082)
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 5,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9083),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9084)
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 5,
                            TenantId = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9086),
                            UpdatedAt = new DateTime(2024, 6, 26, 20, 47, 10, 495, DateTimeKind.Local).AddTicks(9086)
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.UserWorkShift", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "WorkShiftId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkShiftId");

                    b.ToTable("UserWorkShifts");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("CheckIn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckInToleranceMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("CheckOut")
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckOutToleranceMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.CompanyWorkShift", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.WorkShift", "WorkShift")
                        .WithOne()
                        .HasForeignKey("PontoSavi.Domain.Entities.CompanyWorkShift", "WorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.DayOff", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Point", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PontoSavi.Domain.Entities.Company", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Role", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.User", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.Company", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.UserWorkShift", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.WorkShift", "WorkShift")
                        .WithMany()
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.WorkShift", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });
#pragma warning restore 612, 618
        }
    }
}
