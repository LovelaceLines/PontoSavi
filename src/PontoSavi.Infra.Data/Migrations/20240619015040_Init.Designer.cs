// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PontoSavi.Infra.Data.Context;

#nullable disable

namespace PontoSavi.src.PontoSavi.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240619015040_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CNPJ = "00000000000000",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 716, DateTimeKind.Local).AddTicks(3102),
                            Name = "Ponto Savi",
                            TradeName = "Ponto Savi",
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 716, DateTimeKind.Local).AddTicks(3115)
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.CompanyWorkShift", b =>
                {
                    b.Property<int>("WorkShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("WorkShiftId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WorkShiftId", "CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyWorkShifts");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Date", "CompanyId")
                        .IsUnique();

                    b.ToTable("DaysOff");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckInDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckInStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CheckOutAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckOutDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CheckOutStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("Name", "CompanyId")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            ConcurrencyStamp = "1bf10673-4d8c-41fc-b088-b9584900e56c",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(386),
                            Name = "Desenvolvedor",
                            NormalizedName = "DESENVOLVEDOR",
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(402)
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            ConcurrencyStamp = "04f43299-9ceb-45f2-8a31-aeca32aa6988",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(415),
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR",
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(416)
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            ConcurrencyStamp = "4563a3c8-ff91-47f8-a228-480de085c4f4",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(473),
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR",
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(473)
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            ConcurrencyStamp = "b2faaf30-6e7d-44b0-9880-4d306dff7ac6",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(479),
                            Name = "Colaborador",
                            NormalizedName = "COLABORADOR",
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(479)
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 1,
                            ConcurrencyStamp = "0be9713e-58fe-4e20-beb9-4d032e7ad14d",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(484),
                            Name = "CEO",
                            NormalizedName = "CEO",
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 957, DateTimeKind.Local).AddTicks(484)
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CompanyId = 1,
                            ConcurrencyStamp = "b2fa46bf-7d43-4725-9423-98c44a8fb9dc",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 795, DateTimeKind.Local).AddTicks(6441),
                            Email = "dev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Developer",
                            NormalizedEmail = "DEV@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5XVDwXWELdalQagrzRjUqQVsULV1tgWYZRdTaqqfk8Hm2Lp+QvQWlDmBT11+X5BA==",
                            PhoneNumber = "(55) 85 9 9999-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3aa1e78c-c581-45e7-b512-11ccbbe574b8",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 795, DateTimeKind.Local).AddTicks(6477),
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            CompanyId = 1,
                            ConcurrencyStamp = "147acd0d-f27d-4cae-8aa9-278d03bd0810",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 875, DateTimeKind.Local).AddTicks(5435),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Administrator",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAhma4TdEU4NCUuFdCqZUJb9oNtjCPeOXdC/amQO+r1e8uZw33m38VJ30UdMNdh+mg==",
                            PhoneNumber = "(55) 85 9 9999-9998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3c68d64-6fd1-4982-bd28-f83de2360420",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 875, DateTimeKind.Local).AddTicks(5448),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            CompanyId = 1,
                            ConcurrencyStamp = "e9c37d6e-c5c4-4e8b-a0db-2a15575fb430",
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 955, DateTimeKind.Local).AddTicks(6207),
                            Email = "super@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Supervisor",
                            NormalizedEmail = "SUPER@GMAIL.COM",
                            NormalizedUserName = "SUPER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMSuJnxKwNBgnAtpFuUXoBfKlRPtM4XHi/STIRKZlMHU8zBVq5w9VRv4kSpZgCKH8w==",
                            PhoneNumber = "(55) 85 9 9999-9997",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e88490cc-59c3-4b09-8f67-4e92edac2302",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 955, DateTimeKind.Local).AddTicks(6221),
                            UserName = "super"
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1486),
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1499)
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1507),
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1508)
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 5,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1509),
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1510)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1511),
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1511)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1513),
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1514)
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1515),
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1515)
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 4,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1517),
                            UpdatedAt = new DateTime(2024, 6, 18, 22, 50, 39, 960, DateTimeKind.Local).AddTicks(1517)
                        });
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.UserWorkShift", b =>
                {
                    b.Property<int>("WorkShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkShiftId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId", "WorkShiftId")
                        .IsUnique();

                    b.ToTable("UserWorkShifts");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("CheckIn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckInToleranceMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("CheckOut")
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckOutToleranceMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.CompanyWorkShift", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.WorkShift", "WorkShift")
                        .WithOne()
                        .HasForeignKey("PontoSavi.Domain.Entities.CompanyWorkShift", "WorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.DayOff", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Point", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PontoSavi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.Role", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.User", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.UserWorkShift", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PontoSavi.Domain.Entities.WorkShift", "WorkShift")
                        .WithOne()
                        .HasForeignKey("PontoSavi.Domain.Entities.UserWorkShift", "WorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("PontoSavi.Domain.Entities.WorkShift", b =>
                {
                    b.HasOne("PontoSavi.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
